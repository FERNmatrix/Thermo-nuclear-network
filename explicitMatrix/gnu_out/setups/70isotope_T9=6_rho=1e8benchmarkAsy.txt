Oct 22, 2022 branch guidry_debugRG

#define ISOTOPES 70                   // Max isotopes in network (e.g. 16 for alpha network)
#define SIZE 598                      // Max number of reactions (e.g. 48 for alpha network)

#define plotSteps 200                // Number of plot output steps
#define LABELSIZE 35                  // Max size of reaction string a+b>c in characters
#define PF 24                         // Number entries partition function table for isotopes
#define THIRD 0.333333333333333
#define TWOTHIRD 0.66666666666667
#define ECON 9.5768e17                // Convert MeV/nucleon/s to erg/g/s
#define LOG10 0.434294481903251       // Conversion natural log to log10
#define MEV 931.494                   // Conversion of amu to MeV
#define GZ 1.0e-24                    // Constant to ensure 1/max(num, GZ) never divides by 0

#define unitd static_cast<double>(1.0)  // Constant double equal to 1
#define zerod static_cast<double>(0.0)  // Constant double equal to 0

// File pointers for diagnostics output. Corresponding filenames declared 
// at top of main.

FILE* pFileD;
FILE* pfnet;

// Filename for network + partition function input.  The file output/CUDAnet.inp
// output by the Java code through the stream toCUDAnet has the expected format 
// for this file. Standard filenames for test cases are listed in table above.

char networkFile[] = "data/network_70.inp";

// Filename for input rates library data. The file rateLibrary.data output by 
// the Java code through the stream toRateData has the expected format for this 
// file.  Standard filenames for test cases are listed in table above.

char rateLibraryFile[] = "data/rateLibrary_70.data";

// Whether to use constant T and rho (hydroProfile false), in which case a
// constant T9 = T9_start and rho = rho_start are used, or to read
// in a hydrodynamical profile of T and rho versus time (hydroProfile true),
// in which case the file to be read in is specified by the character variable 
// hydroFile[].

bool hydroProfile = false; 

// Filename for input file containing a hydro profile in temperature
// and density that is used if hydroProfile = true. Sample hydro profile 
// files included in the data subdirectory are
//
//    data/torch47Profile.data         // Very hot Type Ia supernova zone
//    data/nova125DProfile.inp         // Representative zone in nova explosion
//    data/tidalSNProfile_100.inp      // Zone in tidal supernova explosion
//
// Use SplineInterpolator to interpolate in table read in. If hydroProfile and 
// plotHydroProfile are true, the hydro profile used for the temperature and 
// density in the calculation is also output to the file gnu_out/hydroProfileInput.data
// in format suitable for gnuplot.

char hydroFile[] = "data/nova125DProfile_400.inp";

// Control output of hydro profile (if one is used) to plot file.

static const bool plotHydroProfile = true;

const static int maxHydroEntries = 403; // Max entries hydro profile

// Control printout of flux data (true to print, false to suppress).
// Lots of data, so most useful for small networks.

static const bool plotFluxes = false;

// Plot output controls and file pointers

static const int maxPlotIsotopes = min(ISOTOPES, 365);   // # species to plot
int plotXlist[maxPlotIsotopes];           // Array of species plot indices

// Pointers to data output files

FILE* plotfile1;
FILE* plotfile2;
FILE* plotfile3;
FILE* plotfile4;
FILE* plotfile5;

// Control flags for diagnostic output to files. Note that setting showDetails
// or showDetails2 true may generate large output files (MB to GB for large networks).

bool showAddRemove = false;  // Show addition/removal of RG from equilibrium
bool showDetails = false;    // Controls diagnostics to pFileD -> gnu_out/diagnostics.data
bool showDetails2 = false;   // Controls diagnostics to pfnet -> gnu_out/network.data

// Control which explicit algebraic approximations are used. Eventually
// this should be set from a data file. To use asymptotic set doASY true
// (which toggles doQSS to false). To use quasi-steady-state (QSS),set 
// doASY false (which toggles doQSS to true). doPE can be true or false 
// with either Asymptotic or QSS. The boolean showPE allows display of the number
// of reaction groups (RG) that would be in equilibrium if PE approximation were
// being implemented. It is true only if Asy or QSS, but PE not being
// implemented.

bool doASY = true;           // Whether to use asymptotic approximation
bool doQSS = !doASY;         // Whether to use QSS approximation 
bool doPE = false;            // Implement partial equilibrium also
bool showPE = !doPE;         // Show RG that would be in equil if doPE=false

string intMethod = "";       // String holding integration method
string ts;                   // Utility string

// Temperature and density variables. Temperature and density can be
// either constant, or read from a hydro profile as a function of time.

double T9;                   // Current temperature in units of 10^9 K
double rho;                  // Current density in units of g/cm^3

// Energy variables (from Q values)

double ERelease;              // Total energy released
double dERelease;             // Energy released per unit time
double netdERelease;          // Energy released in timestep

// Partition function controls. If dopf = true, reaction rates are
// corrected by temperature-dependent partition functions.  However
// partition function factors differ from 1 only at high temperature
// so we only implement partition function corrections if T9 > pfCut9,
// where pfCut9 is a cutoff temperature in units of T9. Typically in
// realistic calculation we would choose dopf = true and pfCut9 = 1.0.

bool dopf = true;
double pfCut9 = 1.0;

// Temperatures in units of 10^9 K for partition function table (see pf[]
// in the class Species). 

double Tpf[PF] = {0.1, 0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 
    1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    
    // Array holding the value of the partition function for each isotope at
    // the current temperature if dopf = true and T9 > pfCut9.
    
    double currentPF[ISOTOPES];
    
    // Array to hold whether given species satisfies asymptotic condition
    // True (1) if asyptotic; else false (0).
    
    bool isAsy[ISOTOPES];         // True if isotope is asymptotic
    double asycheck;              // Species asymptotic if asycheck > 1.0
    double asyFrac = 0.0;         // Fraction isotopes that are asymptotic
    
    // Whether isotope part of any RG in partial equilibrium this timestep
    
    bool isotopeInEquil[ISOTOPES]; 
    
    // isotopeInEquil[] from last timestep
    
    bool isotopeInEquilLast[ISOTOPES]; 
    
    // Set the temperature in units of 10^9 K and density in units of g/cm^3. In a
    // realistic calculation the temperature and density will be passed from the hydro 
    // code in an operator-split coupling of this network to hydro. Here we hardwire
    // constant values for testing purposes, or read in a temperature and density
    // hydro profile if hydroProfile is true.
    
    double T9_start = 6;           // Initial temperature in units of 10^9 K
    double rho_start = 1e8;        // Initial density in g/cm^3
    
    // Integration time data. The variables start_time and stop_time 
    // define the range of integration (all time units in seconds),
    // and dt_start sets the initial integration timestep. In an operator-split 
    // coupling  start_time will be 0, stop_time will correspond to the length
    // of the hydro timestep and dt_init will likely be something like the 
    // last timestep of the previous network integration (for the preceding 
    // hydro timestep). Here we hardwire them for testing purposes.
    // The variable startplot_time allows the plotting interval output
    // in gnu_out/gnufile.data to be a subset of the full integration interval. 
    // Generally, startplot_time > start_time.  By default the stop time for
    // plotting is the same as the stop time for integration, stop_time.
    
    double start_time = 1e-20;             // Start time for integration
    double logStart = log10(start_time);   // Base 10 log start time
    double startplot_time = 1e-18;         // Start time for plot output
    double stop_time = 1e-2;               // Stop time for integration
    double logStop = log10(stop_time);     // Base-10 log stop time5
    double dt_start = 0.01*start_time;     // Initial value of integration dt
    double dt_saved;                       // Full timestep used for this int step
    double t_saved;                        // Start time this timestep (end t for last step)
    double dt_half;                        // Half of full timestep
    double dt_change;                      // Change in proposed dt from last timestep
    double t_end;                          // End time for this timestep
    double dt_new;                         // Variable used in computeNextTimeStep()
    double dtmin;                          // Variable used in computeNextTimeStep()
    double dt_desired;                     // dt desired if not prevented by plot timestep
    double dt_ceiling = 0.1;               // Max timestep is dt_ceiling*t, for accuracy
    
    double dt_FE = dt_start;               // Max stable forward Euler timestep
    double dt_EA = dt_start;               // Max asymptotic timestep
    
    int dtMode;                            // Dual dt stage (0=full, 1=1st half, 2=2nd half)
    
    double massTol_asy = 5e-11;             // Tolerance param if no reactions equilibrated
    double massTol_asyPE = 4e-3;           // Tolerance param if some reactions equilibrated
    double massTol = massTol_asy;          // Timestep tolerance parameter for integration
    double downbumper = 0.7;               // Asy dt decrease factor
    double sf = 1e25;                      // dt_FE = sf/fastest rate
    int maxit = 100;                       // Max asy dt iterations allowed for a step
    int iterations;                        // # iterations in step to conserve particles 
    int totalIterations;                   // Total number of iterations, all steps til now
    int mostIterationsPerStep = 0;         // Most iterations in a timestep
    int maxIterationStep;                  // Step where mostIterationsPerStep occurred
    double maxIterationTime;               // Time where mostIterationsPerStep occurred
    double Error_Observed;                 // Observed integration error
    double Error_Desired;                  // Desired max local integration error
    double E_R;                            // Ratio actual to desired error
    double EpsA = 5e-11;                   // Absolute error tolerance
    double EpsR = 2.0e-4;                  // Relative error tolerance (not presently used)
    
    // equilTime is time to begin imposing partial equilibrium if doPE=true. Hardwired but 
    // eventually should be determined by the program.  In the Java version this was sometimes
    // needed because starting PE test too early could lead to bad results.  This is 
    // probably an error in the Java version, since if operating properly nothing should
    // be changed at a timestep if nothing satisfies PE condition.  Thus, we should not need
    // this in a final version for stability, but it might still be useful since early in
    // a calculation typically nothing satisfies PE, so checking for it is a waste of time.
    // On the other hand, the check costs little computing time so to make the code more
    // universal it may be best to check for equilibration from the beginning of the 
    // calculation. 
    
    double equilTime = start_time;    // Time to begin checking for PE
    double equiTol = 0.015;           // Tolerance for checking whether Ys in RG in equil
    




    190 it=0 t=1.58e-03 dt=1.46e-11 dt'=1.46e-11 int=256640043 asy=0.60 eq=0.77 sX=1.009 Xfac=1.000 dE=5.10e+18 E=5.57e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.52e-05 lT=9.778 lrho=8.00
    191 it=0 t=1.91e-03 dt=1.47e-11 dt'=1.47e-11 int=278577137 asy=0.60 eq=0.77 sX=1.009 Xfac=1.000 dE=5.94e+18 E=5.59e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.58e-05 lT=9.778 lrho=8.00
    192 it=0 t=2.29e-03 dt=1.47e-11 dt'=1.47e-11 int=304813875 asy=0.60 eq=0.77 sX=1.010 Xfac=1.000 dE=6.57e+18 E=5.62e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.62e-05 lT=9.778 lrho=8.00
    193 it=0 t=2.75e-03 dt=1.47e-11 dt'=1.47e-11 int=336265224 asy=0.60 eq=0.77 sX=1.010 Xfac=1.000 dE=6.99e+18 E=5.65e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.65e-05 lT=9.778 lrho=8.00
    194 it=0 t=3.31e-03 dt=1.48e-11 dt'=1.48e-11 int=374019813 asy=0.60 eq=0.77 sX=1.010 Xfac=1.000 dE=7.25e+18 E=5.69e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.67e-05 lT=9.778 lrho=8.00
    195 it=0 t=3.98e-03 dt=1.48e-11 dt'=1.48e-11 int=419377278 asy=0.60 eq=0.77 sX=1.011 Xfac=1.000 dE=7.38e+18 E=5.74e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.68e-05 lT=9.778 lrho=8.00
    196 it=0 t=4.79e-03 dt=1.48e-11 dt'=1.48e-11 int=473892924 asy=0.60 eq=0.77 sX=1.011 Xfac=1.000 dE=7.44e+18 E=5.80e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.68e-05 lT=9.778 lrho=8.00
    197 it=0 t=5.75e-03 dt=1.48e-11 dt'=1.48e-11 int=539431007 asy=0.60 eq=0.77 sX=1.012 Xfac=1.000 dE=7.46e+18 E=5.87e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.69e-05 lT=9.778 lrho=8.00
    198 it=0 t=6.92e-03 dt=1.48e-11 dt'=1.48e-11 int=618228805 asy=0.60 eq=0.77 sX=1.012 Xfac=1.000 dE=7.47e+18 E=5.95e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.69e-05 lT=9.778 lrho=8.00
    199 it=0 t=8.32e-03 dt=1.48e-11 dt'=1.48e-11 int=712973968 asy=0.60 eq=0.77 sX=1.013 Xfac=1.000 dE=7.48e+18 E=6.06e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.69e-05 lT=9.778 lrho=8.00
    200 it=0 t=1.00e-02 dt=1.48e-11 dt'=1.48e-11 int=826897558 asy=0.60 eq=0.77 sX=1.014 Xfac=1.000 dE=7.49e+18 E=6.18e+17 E_R=9.00e-01 c1=0 c2=1 fast=205 Q=7.46 dev=7.69e-05 lT=9.778 lrho=8.00
    
    Integration using ASY method (Partition function corrections applied for T9=1.00 and above)
    T9=6.000e+00 (constant) rho=1.000e+08 (constant) massTol_asy=5.00e-11 massTol_PE=4.00e-03
    sf=1.00e+25 equiTol=1.50e-02 equilTime=1.00e-20
    maxit=100 downbumper= 0.700 EpsA=5.00e-11 EpsR=2.00e-04 deviousMax=0.500
    Network: data/network_70.inp  Rates: data/rateLibrary_70.data
    Isotopes=70 Reactions=598 ReactionGroups=269 SingletRG=32
    Integration steps=826897558 totalIterations=296117200 IntegrationSteps_plotted=826897504
    Max dt iterations = 6 at step 31357 (t=6.345e-10)
    Timer: 2.3032e+05 sec used
    
    FINAL ABUNDANCES Y AND MASS FRACTIONS X
    
    0 1n Y=6.2904e-07 X=6.2904e-07
    1 1H Y=2.0519e-02 X=2.0519e-02
    2 4He Y=1.5968e-02 X=6.3871e-02
    3 11C Y=1.9888e-12 X=2.1877e-11
    4 12C Y=1.8984e-07 X=2.2781e-06
    5 13N Y=1.2857e-10 X=1.6714e-09
    6 14N Y=1.2010e-10 X=1.6814e-09
    7 15O Y=3.9833e-10 X=5.9750e-09
    8 16O Y=4.1526e-07 X=6.6442e-06
    9 17O Y=6.4820e-12 X=1.1019e-10
    10 17Fl Y=6.9095e-11 X=1.1746e-09
    11 18Fl Y=8.5477e-13 X=1.5386e-11
    12 20Ne Y=8.4411e-09 X=1.6882e-07
    13 21Ne Y=4.0622e-12 X=8.5306e-11
    14 21Na Y=3.6016e-11 X=7.5633e-10
    15 23Na Y=8.3769e-11 X=1.9267e-09
    16 23Mg Y=3.3006e-10 X=7.5915e-09
    17 24Mg Y=1.0963e-06 X=2.6311e-05
    18 25Mg Y=1.8362e-09 X=4.5905e-08
    19 26Mg Y=1.3434e-10 X=3.4930e-09
    20 25Al Y=3.8018e-09 X=9.5045e-08
    21 26Al Y=4.7695e-09 X=1.2401e-07
    22 27Al Y=6.0768e-08 X=1.6407e-06
    23 27Si Y=4.3618e-08 X=1.1777e-06
    24 28Si Y=3.7477e-04 X=1.0494e-02
    25 29Si Y=2.4161e-06 X=7.0066e-05
    26 30Si Y=1.9612e-07 X=5.8837e-06
    27 29P Y=1.2006e-06 X=3.4817e-05
    28 30P Y=1.6753e-06 X=5.0258e-05
    29 31P Y=4.4172e-06 X=1.3693e-04
    30 32P Y=1.7161e-08 X=5.4916e-07
    31 33P Y=3.2688e-10 X=1.0787e-08
    32 31S Y=9.3946e-07 X=2.9123e-05
    33 32S Y=3.9556e-04 X=1.2658e-02
    34 33S Y=7.1524e-06 X=2.3603e-04
    35 34S Y=1.4785e-06 X=5.0269e-05
    36 33Cl Y=1.0541e-06 X=3.4784e-05
    37 34Cl Y=2.2210e-06 X=7.5514e-05
    38 35Cl Y=1.0051e-05 X=3.5177e-04
    39 36Cl Y=6.2556e-08 X=2.2520e-06
    40 35Ar Y=7.3141e-07 X=2.5599e-05
    41 36Ar Y=2.5710e-04 X=9.2557e-03
    42 37Ar Y=5.9502e-06 X=2.2016e-04
    43 38Ar Y=2.6957e-06 X=1.0244e-04
    44 38K Y=1.8140e-06 X=6.8931e-05
    45 39K Y=1.7181e-05 X=6.7006e-04
    46 40Ca Y=3.0582e-04 X=1.2233e-02
    47 41Ca Y=6.1176e-06 X=2.5082e-04
    48 42Ca Y=1.0558e-06 X=4.4343e-05
    49 44Ti Y=1.8015e-05 X=7.9265e-04
    50 45Ti Y=5.4602e-06 X=2.4571e-04
    51 46Ti Y=1.2989e-05 X=5.9748e-04
    52 47V Y=2.2495e-05 X=1.0573e-03
    53 48Cr Y=1.0856e-04 X=5.2107e-03
    54 49Cr Y=1.0211e-04 X=5.0033e-03
    55 50Cr Y=3.5253e-04 X=1.7626e-02
    56 51Cr Y=2.5341e-05 X=1.2924e-03
    57 51Mn Y=3.8333e-04 X=1.9550e-02
    58 52Mn Y=1.4599e-04 X=7.5917e-03
    59 53Mn Y=1.6919e-04 X=8.9671e-03
    60 52Fe Y=6.7001e-04 X=3.4840e-02
    61 53Fe Y=7.8348e-04 X=4.1524e-02
    62 54Fe Y=4.0020e-03 X=2.1611e-01
    63 55Fe Y=2.9877e-04 X=1.6432e-02
    64 55Co Y=2.8276e-03 X=1.5552e-01
    65 56Co Y=5.7683e-04 X=3.2303e-02
    66 57Co Y=1.9802e-04 X=1.1287e-02
    67 56Ni Y=2.6285e-03 X=1.4720e-01
    68 57Ni Y=1.3522e-03 X=7.7073e-02
    69 58Ni Y=1.4177e-03 X=8.2227e-02
    
