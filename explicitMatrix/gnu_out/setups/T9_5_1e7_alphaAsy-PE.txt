#define ISOTOPES 16                   // Max isotopes in network (e.g. 16 for alpha network)
#define SIZE 48                       // Max number of reactions (e.g. 48 for alpha network)

#define plotSteps 100               // Number of plot output steps
#define LABELSIZE 35                  // Max size of reaction string a+b>c in characters
#define PF 24                         // Number entries partition function table for isotopes
#define THIRD 0.333333333333333
#define TWOTHIRD 0.66666666666667
#define ECON 9.5768e17                // Convert MeV/nucleon/s to erg/g/s
#define LOG10 0.434294481903251       // Conversion natural log to log10
#define MEV 931.494                   // Conversion of amu to MeV
#define GZ 1.0e-24                    // Constant to ensure 1/max(num, GZ) never divides by 0

#define unitd static_cast<double>(1.0)  // Constant double equal to 1
#define zerod static_cast<double>(0.0)  // Constant double equal to 0

// File pointers for diagnostics output. Corresponding filenames declared 
// at top of main.

FILE* pFileD;
FILE* pfnet;

// Filename for network + partition function input.  The file output/CUDAnet.inp
// output by the Java code through the stream toCUDAnet has the expected format 
// for this file. Standard filenames for test cases are listed in table above.

char networkFile[] = "data/network_alpha.inp";

// Filename for input rates library data. The file rateLibrary.data output by 
// the Java code through the stream toRateData has the expected format for this 
// file.  Standard filenames for test cases are listed in table above.

char rateLibraryFile[] = "data/rateLibrary_alpha.data";

// Whether to use constant T and rho (hydroProfile false), in which case a
// constant T9 = T9_start and rho = rho_start are used, or to read
// in a hydrodynamical profile of T and rho versus time (hydroProfile true),
// in which case the file to be read in is specified by the character variable 
// hydroFile[].

bool hydroProfile = false; 

// Filename for input file containing a hydro profile in temperature
// and density that is used if hydroProfile = true. Sample hydro profile 
// files included in the data subdirectory are
//
//    data/torch47Profile.data         // Very hot Type Ia supernova zone
//    data/nova125DProfile.inp         // Representative zone in nova explosion
//    data/tidalSNProfile_100.inp      // Zone in tidal supernova explosion
//
// Use SplineInterpolator to interpolate in table read in. If hydroProfile and 
// plotHydroProfile are true, the hydro profile used for the temperature and 
// density in the calculation is also output to the file gnu_out/hydroProfileInput.data
// in format suitable for gnuplot.

char hydroFile[] = "data/viktorProfile_400.inp";

// Control output of hydro profile (if one is used) to plot file.

static const bool plotHydroProfile = true;

const static int maxHydroEntries = 408; // Max entries hydro profile

// Control printout of flux data (true to print, false to suppress).
// Lots of data, so most useful for small networks.

static const bool plotFluxes = false;

// Plot output controls and file pointers

static const int maxPlotIsotopes = min(ISOTOPES, 365);   // # species to plot
int plotXlist[maxPlotIsotopes];           // Array of species plot indices

// Pointers to data output files

FILE* plotfile1;
FILE* plotfile2;
FILE* plotfile3;
FILE* plotfile4;

// Control flags for diagnostic output to files. Note that setting showDetails
// or showDetails2 true may generate large output files (MB to GB for large networks).

bool showAddRemove = false;  // Show addition/removal of RG from equilibrium
bool showDetails = false;    // Controls diagnostics to pFileD -> gnu_out/diagnostics.data
bool showDetails2 = false;   // Controls diagnostics to pfnet -> gnu_out/network.data

// Control which explicit algebraic approximations are used. Eventually
// this should be set from a data file. To use asymptotic set doASY true
// (which toggles doQSS to false). To use quasi-steady-state (QSS),set 
// doASY false (which toggles doQSS to true). doPE can be true or false 
// with either Asymptotic or QSS. The boolean showPE allows display of the number
// of reaction groups (RG) that would be in equilibrium if PE approximation were
// being implemented. It is true only if Asy or QSS, but PE not being
// implemented.

bool doASY = true;           // Whether to use asymptotic approximation
bool doQSS = !doASY;         // Whether to use QSS approximation 
bool doPE = true;            // Implement partial equilibrium also
bool showPE = !doPE;         // Show RG that would be in equil if doPE=false

string intMethod = "";       // String holding integration method
string ts;                   // Utility string

// Temperature and density variables. Temperature and density can be
// either constant, or read from a hydro profile as a function of time.

double T9;                   // Current temperature in units of 10^9 K
double rho;                  // Current density in units of g/cm^3

// Energy variables (from Q values)

double ERelease;              // Total energy released
double dERelease;             // Energy released per unit time
double netdERelease;          // Energy released in timestep

// Partition function controls. If dopf = true, reaction rates are
// corrected by temperature-dependent partition functions.  However
// partition function factors differ from 1 only at high temperature
// so we only implement partition function corrections if T9 > pfCut9,
// where pfCut9 is a cutoff temperature in units of T9. Typically in
// realistic calculation we would choose dopf = true and pfCut9 = 1.0.

bool dopf = true;
double pfCut9 = 1.0;

// Temperatures in units of 10^9 K for partition function table (see pf[]
// in the class Species). 

double Tpf[PF] = {0.1, 0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 
    1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    
    // Array holding the value of the partition function for each isotope at
    // the current temperature if dopf = true and T9 > pfCut9.
    
    double currentPF[ISOTOPES];
    
    // Array to hold whether given species satisfies asymptotic condition
    // True (1) if asyptotic; else false (0).
    
    bool isAsy[ISOTOPES];         // True if isotope is asymptotic
    double asycheck;              // Species asymptotic if asycheck > 1.0
    double asyFrac = 0.0;         // Fraction isotopes that are asymptotic
    
    // Whether isotope part of any RG in partial equilibrium this timestep
    
    bool isotopeInEquil[ISOTOPES]; 
    
    // isotopeInEquil[] from last timestep
    
    bool isotopeInEquilLast[ISOTOPES]; 
    
    // Set the temperature in units of 10^9 K and density in units of g/cm^3. In a
    // realistic calculation the temperature and density will be passed from the hydro 
    // code in an operator-split coupling of this network to hydro. Here we hardwire
    // constant values for testing purposes, or read in a temperature and density
    // hydro profile if hydroProfile is true.
    
    double T9_start = 5;           // Initial temperature in units of 10^9 K
    double rho_start = 1e7;        // Initial density in g/cm^3
    
    // Integration time data. The variables start_time and stop_time 
    // define the range of integration (all time units in seconds),
    // and dt_start sets the initial integration timestep. In an operator-split 
    // coupling  start_time will be 0, stop_time will correspond to the length
    // of the hydro timestep and dt_init will likely be something like the 
    // last timestep of the previous network integration (for the preceding 
    // hydro timestep). Here we hardwire them for testing purposes.
    // The variable startplot_time allows the plotting interval output
    // in gnu_out/gnufile.data to be a subset of the full integration interval. 
    // Generally, startplot_time > start_time.  By default the stop time for
    // plotting is the same as the stop time for integration, stop_time.
    
    double start_time = 1e-20;             // Start time for integration
    double logStart = log10(start_time);   // Base 10 log start time
    double startplot_time = 1e-18;          // Start time for plot output
    double stop_time = 1e2;                // Stop time for integration
    double logStop = log10(stop_time);     // Base-10 log stop time5
    double dt_start = 0.01*start_time;     // Initial value of integration dt
    double dt_saved;                       // Full timestep used for this int step
    double t_saved;                        // Start time this timestep (end t for last step)
    double dt_half;                        // Half of full timestep
    double dt_change;                      // Change in proposed dt from last timestep
    double t_end;                          // End time for this timestep
    double dt_new;                         // Variable used in computeNextTimeStep()
    double dtmin;                          // Variable used in computeNextTimeStep()
    double dt_desired;                     // dt desired if not prevented by plot timestep
    double dt_ceiling = 0.1;               // Max timestep is dt_ceiling*t, for accuracy
    
    double dt_FE = dt_start;               // Max stable forward Euler timestep
    double dt_EA = dt_start;               // Max asymptotic timestep
    
    int dtMode;                            // Dual dt stage (0=full, 1=1st half, 2=2nd half)
    
    double massTol_asy = 4e-4;             // Tolerance param if no reactions equilibrated
    double massTol_asyPE = 1e-4;           // Tolerance param if some reactions equilibrated
    double massTol = massTol_asy;          // Timestep tolerance parameter for integration
    double downbumper = 0.7;               // Asy dt decrease factor
    double sf = 1e25;                      // dt_FE = sf/fastest rate
    int maxit = 100;                        // Max asy dt iterations allowed for a step
    int iterations;                        // # iterations in step to conserve particles 
    int totalIterations;                   // Total number of iterations, all steps til now
    int mostIterationsPerStep = 0;         // Most iterations in a timestep
    int maxIterationStep;                  // Step where mostIterationsPerStep occurred
    double maxIterationTime;               // Time where mostIterationsPerStep occurred
    double Error_Observed;                 // Observed integration error
    double Error_Desired;                  // Desired max local integration error
    double E_R;                            // Ratio actual to desired error
    double EpsA = massTol_asyPE;           // Absolute error tolerance
    double EpsR = 2.0e-4;                  // Relative error tolerance (not presently used)
    
    // equilTime is time to begin imposing partial equilibrium if doPE=true. Hardwired but 
    // eventually should be determined by the program.  In the Java version this was sometimes
    // needed because starting PE test too early could lead to bad results.  This is 
    // probably an error in the Java version, since if operating properly nothing should
    // be changed at a timestep if nothing satisfies PE condition.  Thus, we should not need
    // this in a final version for stability, but it might still be useful since early in
    // a calculation typically nothing satisfies PE, so checking for it is a waste of time.
    // On the other hand, the check costs little computing time so to make the code more
    // universal it may be best to check for equilibration from the beginning of the 
    // calculation. 
    
    double equilTime = start_time;    // Time to begin checking for PE
    
    double equiTol = 0.02;           // Tolerance for checking whether Ys in RG in equil
    double deviousMax = 0.2;          // Max allowed deviation from equil k ratio in timestep
    
    -------------------------------
    
    95 it=0 t=1.09e+01 dt=1.09e+00 dt'=9.88e-01 int=7412 asy=0.12 eq=0.95 sX=1.000 Xfac=1.000 dE=1.13e+07 E=6.16e+17 E_R=1.14e-04 c1=1 c2=1 fast=13 Q=-4.73 dev=1.97e-05 lT=9.699 lrho=7.00
    96 it=0 t=1.59e+01 dt=1.59e+00 dt'=1.45e+00 int=7416 asy=0.12 eq=0.95 sX=1.000 Xfac=1.000 dE=7.48e+06 E=6.16e+17 E_R=1.60e-04 c1=1 c2=1 fast=13 Q=-4.73 dev=3.21e-05 lT=9.699 lrho=7.00
    97 it=0 t=2.56e+01 dt=2.56e+00 dt'=2.33e+00 int=7421 asy=0.12 eq=0.95 sX=1.000 Xfac=1.000 dE=4.48e+06 E=6.16e+17 E_R=2.48e-04 c1=1 c2=1 fast=13 Q=-4.73 dev=2.27e-05 lT=9.699 lrho=7.00
    98 it=0 t=4.13e+01 dt=4.13e+00 dt'=3.75e+00 int=7426 asy=0.12 eq=0.95 sX=1.000 Xfac=1.000 dE=2.67e+06 E=6.16e+17 E_R=3.87e-04 c1=1 c2=1 fast=13 Q=-4.73 dev=3.88e-05 lT=9.699 lrho=7.00
    99 it=0 t=6.65e+01 dt=6.65e+00 dt'=6.04e+00 int=7431 asy=0.12 eq=0.95 sX=1.000 Xfac=1.000 dE=1.57e+06 E=6.16e+17 E_R=6.05e-04 c1=1 c2=1 fast=13 Q=-4.73 dev=6.71e-05 lT=9.699 lrho=7.00
    100 it=0 t=1.07e+02 dt=1.07e+01 dt'=9.73e+00 int=7436 asy=0.12 eq=0.95 sX=1.000 Xfac=1.000 dE=8.67e+05 E=6.16e+17 E_R=9.45e-04 c1=1 c2=1 fast=13 Q=-4.73 dev=2.05e-05 lT=9.699 lrho=7.00
    
    Integration using ASY+PE method (Partition function corrections applied for T9=1.00 and above)
    T9=5.000e+00 (constant) rho=1.000e+07 (constant) massTol_asy=4.00e-04 massTol_PE=1.00e-04
    sf=1.00e+25 equiTol=2.00e-02 equilTime=1.00e-20
    maxit=100 downbumper= 0.700 EpsA=1.00e-04 EpsR=2.00e-04 deviousMax=0.200
    Network: data/network_alpha.inp  Rates: data/rateLibrary_alpha.data
    Isotopes=16 Reactions=48 ReactionGroups=19 SingletRG=0
    Integration steps=7436 totalIterations=6722 IntegrationSteps_plotted=7379
    Max dt iterations = 28 at step 4883 (t=4.369e-01)
    Timer: 3.2678e-01 sec used
    
    FINAL ABUNDANCES Y AND MASS FRACTIONS X
    
    0 4He Y=1.0469e-02 X=4.1874e-02
    1 12C Y=1.6740e-08 X=2.0089e-07
    2 16O Y=5.1161e-08 X=8.1857e-07
    3 20Ne Y=5.6243e-10 X=1.1249e-08
    4 24Mg Y=2.3631e-07 X=5.6714e-06
    5 28Si Y=3.6459e-04 X=1.0209e-02
    6 32S Y=5.0645e-04 X=1.6206e-02
    7 36Ar Y=3.5778e-04 X=1.2880e-02
    8 40Ca Y=5.8712e-04 X=2.3485e-02
    9 44Ti Y=1.5752e-05 X=6.9309e-04
    10 48Cr Y=1.4140e-04 X=6.7872e-03
    11 52Fe Y=1.6305e-03 X=8.4784e-02
    12 56Ni Y=1.4339e-02 X=8.0298e-01
    13 60Zn Y=1.5521e-06 X=9.3128e-05
    14 64Ge Y=1.1744e-10 X=7.5162e-09
    15 68Se Y=1.7168e-14 X=1.1674e-12
    
