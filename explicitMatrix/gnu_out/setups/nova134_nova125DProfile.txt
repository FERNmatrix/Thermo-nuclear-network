Oct 15, 2022 Asy guidry_debugRG branch

#define ISOTOPES 134                   // Max isotopes in network (e.g. 16 for alpha network)
#define SIZE 1566                       // Max number of reactions (e.g. 48 for alpha network)

#define plotSteps 200               // Number of plot output steps
#define LABELSIZE 35                  // Max size of reaction string a+b>c in characters
#define PF 24                         // Number entries partition function table for isotopes
#define THIRD 0.333333333333333
#define TWOTHIRD 0.66666666666667
#define ECON 9.5768e17                // Convert MeV/nucleon/s to erg/g/s
#define LOG10 0.434294481903251       // Conversion natural log to log10
#define MEV 931.494                   // Conversion of amu to MeV
#define GZ 1.0e-24                    // Constant to ensure 1/max(num, GZ) never divides by 0

#define unitd static_cast<double>(1.0)  // Constant double equal to 1
#define zerod static_cast<double>(0.0)  // Constant double equal to 0

// File pointers for diagnostics output. Corresponding filenames declared 
// at top of main.

FILE* pFileD;
FILE* pfnet;

// Filename for network + partition function input.  The file output/CUDAnet.inp
// output by the Java code through the stream toCUDAnet has the expected format 
// for this file. Standard filenames for test cases are listed in table above.

char networkFile[] = "data/network_nova134.inp";

// Filename for input rates library data. The file rateLibrary.data output by 
// the Java code through the stream toRateData has the expected format for this 
// file.  Standard filenames for test cases are listed in table above.

char rateLibraryFile[] = "data/rateLibrary_nova134.data";

// Whether to use constant T and rho (hydroProfile false), in which case a
// constant T9 = T9_start and rho = rho_start are used, or to read
// in a hydrodynamical profile of T and rho versus time (hydroProfile true),
// in which case the file to be read in is specified by the character variable 
// hydroFile[].

bool hydroProfile = true; 

// Filename for input file containing a hydro profile in temperature
// and density that is used if hydroProfile = true. Sample hydro profile 
// files included in the data subdirectory are
//
//    data/torch47Profile.data         // Very hot Type Ia supernova zone
//    data/nova125DProfile.inp         // Representative zone in nova explosion
//    data/tidalSNProfile_100.inp      // Zone in tidal supernova explosion
//
// Use SplineInterpolator to interpolate in table read in. If hydroProfile and 
// plotHydroProfile are true, the hydro profile used for the temperature and 
// density in the calculation is also output to the file gnu_out/hydroProfileInput.data
// in format suitable for gnuplot.

char hydroFile[] = "data/nova125DProfile_400.inp";

// Control output of hydro profile (if one is used) to plot file.

static const bool plotHydroProfile = true;

const static int maxHydroEntries = 403; // Max entries hydro profile

// Control printout of flux data (true to print, false to suppress).
// Lots of data, so most useful for small networks.

static const bool plotFluxes = false;

// Plot output controls and file pointers

static const int maxPlotIsotopes = min(ISOTOPES, 365);   // # species to plot
int plotXlist[maxPlotIsotopes];           // Array of species plot indices

// Pointers to data output files

FILE* plotfile1;
FILE* plotfile2;
FILE* plotfile3;
FILE* plotfile4;

// Control flags for diagnostic output to files. Note that setting showDetails
// or showDetails2 true may generate large output files (MB to GB for large networks).

bool showAddRemove = false;  // Show addition/removal of RG from equilibrium
bool showDetails = false;    // Controls diagnostics to pFileD -> gnu_out/diagnostics.data
bool showDetails2 = false;   // Controls diagnostics to pfnet -> gnu_out/network.data

// Control which explicit algebraic approximations are used. Eventually
// this should be set from a data file. To use asymptotic set doASY true
// (which toggles doQSS to false). To use quasi-steady-state (QSS),set 
// doASY false (which toggles doQSS to true). doPE can be true or false 
// with either Asymptotic or QSS. The boolean showPE allows display of the number
// of reaction groups (RG) that would be in equilibrium if PE approximation were
// being implemented. It is true only if Asy or QSS, but PE not being
// implemented.

bool doASY = true;           // Whether to use asymptotic approximation
bool doQSS = !doASY;         // Whether to use QSS approximation 
bool doPE = false;            // Implement partial equilibrium also
bool showPE = !doPE;         // Show RG that would be in equil if doPE=false

string intMethod = "";       // String holding integration method
string ts;                   // Utility string

// Temperature and density variables. Temperature and density can be
// either constant, or read from a hydro profile as a function of time.

double T9;                   // Current temperature in units of 10^9 K
double rho;                  // Current density in units of g/cm^3

// Energy variables (from Q values)

double ERelease;              // Total energy released
double dERelease;             // Energy released per unit time
double netdERelease;          // Energy released in timestep

// Partition function controls. If dopf = true, reaction rates are
// corrected by temperature-dependent partition functions.  However
// partition function factors differ from 1 only at high temperature
// so we only implement partition function corrections if T9 > pfCut9,
// where pfCut9 is a cutoff temperature in units of T9. Typically in
// realistic calculation we would choose dopf = true and pfCut9 = 1.0.

bool dopf = true;
double pfCut9 = 1.0;

// Temperatures in units of 10^9 K for partition function table (see pf[]
// in the class Species). 

double Tpf[PF] = {0.1, 0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 
    1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    
    // Array holding the value of the partition function for each isotope at
    // the current temperature if dopf = true and T9 > pfCut9.
    
    double currentPF[ISOTOPES];
    
    // Array to hold whether given species satisfies asymptotic condition
    // True (1) if asyptotic; else false (0).
    
    bool isAsy[ISOTOPES];         // True if isotope is asymptotic
    double asycheck;              // Species asymptotic if asycheck > 1.0
    double asyFrac = 0.0;         // Fraction isotopes that are asymptotic
    
    // Whether isotope part of any RG in partial equilibrium this timestep
    
    bool isotopeInEquil[ISOTOPES]; 
    
    // isotopeInEquil[] from last timestep
    
    bool isotopeInEquilLast[ISOTOPES]; 
    
    // Set the temperature in units of 10^9 K and density in units of g/cm^3. In a
    // realistic calculation the temperature and density will be passed from the hydro 
    // code in an operator-split coupling of this network to hydro. Here we hardwire
    // constant values for testing purposes, or read in a temperature and density
    // hydro profile if hydroProfile is true.
    
    double T9_start = 7;           // Initial temperature in units of 10^9 K
    double rho_start = 1e8;        // Initial density in g/cm^3
    
    // Integration time data. The variables start_time and stop_time 
    // define the range of integration (all time units in seconds),
    // and dt_start sets the initial integration timestep. In an operator-split 
    // coupling  start_time will be 0, stop_time will correspond to the length
    // of the hydro timestep and dt_init will likely be something like the 
    // last timestep of the previous network integration (for the preceding 
    // hydro timestep). Here we hardwire them for testing purposes.
    // The variable startplot_time allows the plotting interval output
    // in gnu_out/gnufile.data to be a subset of the full integration interval. 
    // Generally, startplot_time > start_time.  By default the stop time for
    // plotting is the same as the stop time for integration, stop_time.
    
    double start_time = 1e-20;             // Start time for integration
    double logStart = log10(start_time);   // Base 10 log start time
    double startplot_time = 5e-6;          // Start time for plot output
    double stop_time = 1e6;                // Stop time for integration
    double logStop = log10(stop_time);     // Base-10 log stop time5
    double dt_start = 0.01*start_time;     // Initial value of integration dt
    double dt_saved;                       // Full timestep used for this int step
    double t_saved;                        // Start time this timestep (end t for last step)
    double dt_half;                        // Half of full timestep
    double dt_change;                      // Change in proposed dt from last timestep
    double t_end;                          // End time for this timestep
    double dt_new;                         // Variable used in computeNextTimeStep()
    double dtmin;                          // Variable used in computeNextTimeStep()
    double dt_desired;                     // dt desired if not prevented by plot timestep
    double dt_ceiling = 0.1;               // Max timestep is dt_ceiling*t, for accuracy
    
    double dt_FE = dt_start;               // Max stable forward Euler timestep
    double dt_EA = dt_start;               // Max asymptotic timestep
    
    int dtMode;                            // Dual dt stage (0=full, 1=1st half, 2=2nd half)
    
    double massTol_asy = 2e-4;             // Tolerance param if no reactions equilibrated
    double massTol_asyPE = 9e-4;           // Tolerance param if some reactions equilibrated
    double massTol = massTol_asy;          // Timestep tolerance parameter for integration
    double downbumper = 0.7;               // Asy dt decrease factor
    double sf = 1e25;                      // dt_FE = sf/fastest rate
    int maxit = 100;                       // Max asy dt iterations allowed for a step
    int iterations;                        // # iterations in step to conserve particles 
    int totalIterations;                   // Total number of iterations, all steps til now
    int mostIterationsPerStep = 0;         // Most iterations in a timestep
    int maxIterationStep;                  // Step where mostIterationsPerStep occurred
    double maxIterationTime;               // Time where mostIterationsPerStep occurred
    double Error_Observed;                 // Observed integration error
    double Error_Desired;                  // Desired max local integration error
    double E_R;                            // Ratio actual to desired error
    double EpsA = 2e-4;                    // Absolute error tolerance
    double EpsR = 2.0e-4;                  // Relative error tolerance (not presently used)
    
    // equilTime is time to begin imposing partial equilibrium if doPE=true. Hardwired but 
    // eventually should be determined by the program.  In the Java version this was sometimes
    // needed because starting PE test too early could lead to bad results.  This is 
    // probably an error in the Java version, since if operating properly nothing should
    // be changed at a timestep if nothing satisfies PE condition.  Thus, we should not need
    // this in a final version for stability, but it might still be useful since early in
    // a calculation typically nothing satisfies PE, so checking for it is a waste of time.
    // On the other hand, the check costs little computing time so to make the code more
    // universal it may be best to check for equilibration from the beginning of the 
    // calculation. 
    
    double equilTime = start_time;    // Time to begin checking for PE
    double equiTol = 0.015;           // Tolerance for checking whether Ys in RG in equil
    
    
    
    195 it=0 t=5.42e+05 dt=5.42e+04 dt'=4.93e+04 int=855 asy=0.35 eq=32.08 sX=0.986 Xfac=1.000 dE=4.87e+08 E=9.70e+17 E_R=7.13e-03 c1=1 c2=1 fast=184 Q=17.34 dev=0.00e+00 lT=7.635 lrho=1.11
    196 it=0 t=5.97e+05 dt=5.97e+04 dt'=5.42e+04 int=856 asy=0.37 eq=32.10 sX=0.986 Xfac=1.000 dE=4.30e+08 E=9.70e+17 E_R=6.98e-03 c1=1 c2=1 fast=184 Q=17.34 dev=5.85e+13 lT=7.631 lrho=1.11
    197 it=0 t=7.22e+05 dt=7.22e+04 dt'=6.56e+04 int=858 asy=0.35 eq=32.18 sX=0.986 Xfac=1.000 dE=3.35e+08 E=9.71e+17 E_R=6.65e-03 c1=1 c2=1 fast=184 Q=17.34 dev=5.00e+13 lT=7.623 lrho=1.10
    198 it=0 t=7.94e+05 dt=7.94e+04 dt'=7.22e+04 int=859 asy=0.33 eq=32.20 sX=0.986 Xfac=1.000 dE=2.95e+08 E=9.71e+17 E_R=6.47e-03 c1=1 c2=1 fast=184 Q=17.34 dev=0.00e+00 lT=7.619 lrho=1.10
    199 it=0 t=9.61e+05 dt=9.61e+04 dt'=8.74e+04 int=861 asy=0.34 eq=32.26 sX=0.986 Xfac=1.000 dE=2.29e+08 E=9.71e+17 E_R=6.14e-03 c1=1 c2=1 fast=184 Q=17.34 dev=0.00e+00 lT=7.611 lrho=1.09
    200 it=0 t=1.06e+06 dt=1.06e+05 dt'=9.61e+04 int=862 asy=0.33 eq=32.30 sX=0.986 Xfac=1.000 dE=2.02e+08 E=9.71e+17 E_R=5.99e-03 c1=1 c2=1 fast=184 Q=17.34 dev=3.28e+13 lT=7.607 lrho=1.08
    
    Integration using ASY method (Partition function corrections applied for T9=1.00 and above)
    massTol_asy=2.00e-04 massTol_PE=9.00e-04
    sf=1.00e+25 equiTol=1.50e-02 equilTime=1.00e-20
    maxit=100 downbumper= 0.700 EpsA=2.00e-04 EpsR=2.00e-04 deviousMax=0.500
    Network: data/network_nova134.inp  Rates: data/rateLibrary_nova134.data
    Hydro profile: data/nova125DProfile_400.inp
    Isotopes=134 Reactions=1566 ReactionGroups=693 SingletRG=99
    Integration steps=862 totalIterations=433 IntegrationSteps_plotted=501
    Max dt iterations = 18 at step 528 (t=4.652e+01)
    Timer: 6.4567e-01 sec used
    
    FINAL ABUNDANCES Y AND MASS FRACTIONS X
    
    0 1n Y=3.2857e-33 X=3.2857e-33
    1 1H Y=2.2570e-01 X=2.2570e-01
    2 2H Y=4.2625e-19 X=8.5251e-19
    3 3He Y=1.0944e-12 X=3.2831e-12
    4 4He Y=5.8497e-02 X=2.3399e-01
    5 7Li Y=8.2464e-17 X=5.7725e-16
    6 7Be Y=2.8670e-08 X=2.0069e-07
    7 8B Y=2.4658e-14 X=1.9726e-13
    8 11B Y=2.7583e-27 X=3.0341e-26
    9 9C Y=2.4407e-22 X=2.1967e-21
    10 11C Y=1.2069e-25 X=1.3276e-24
    11 12C Y=5.3575e-03 X=6.4290e-02
    12 13C Y=2.0602e-03 X=2.6782e-02
    13 14C Y=1.0824e-16 X=1.5153e-15
    14 12N Y=-3.6162e-31 X=-4.3395e-30
    15 13N Y=1.2303e-08 X=1.5994e-07
    16 14N Y=1.6574e-03 X=2.3204e-02
    17 15N Y=5.7056e-08 X=8.5583e-07
    18 16N Y=5.8549e-31 X=9.3678e-30
    19 14O Y=6.6210e-17 X=9.2694e-16
    20 15O Y=1.6133e-11 X=2.4200e-10
    21 16O Y=9.9071e-06 X=1.5851e-04
    22 17O Y=1.7646e-06 X=2.9998e-05
    23 18O Y=7.7023e-08 X=1.3864e-06
    24 16Fl Y=2.5021e-23 X=4.0033e-22
    25 17Fl Y=2.0718e-15 X=3.5220e-14
    26 18Fl Y=4.5758e-14 X=8.2364e-13
    27 19Fl Y=3.2879e-08 X=6.2470e-07
    28 20Fl Y=1.6922e-32 X=3.3843e-31
    29 16Ne Y=2.9074e-21 X=4.6519e-20
    30 18Ne Y=6.3713e-29 X=1.1468e-27
    31 19Ne Y=2.9159e-26 X=5.5403e-25
    32 20Ne Y=6.7794e-03 X=1.3559e-01
    33 21Ne Y=4.4272e-07 X=9.2970e-06
    34 22Ne Y=3.4674e-07 X=7.6284e-06
    35 23Ne Y=1.9684e-33 X=4.5273e-32
    36 18Na Y=2.0881e-21 X=3.7585e-20
    37 19Na Y=-4.3981e-31 X=-8.3564e-30
    38 20Na Y=-9.1317e-21 X=-1.8263e-19
    39 21Na Y=1.4069e-15 X=2.9546e-14
    40 22Na Y=3.8655e-05 X=8.5042e-04
    41 23Na Y=8.6076e-05 X=1.9798e-03
    42 24Na Y=2.2794e-24 X=5.4707e-23
    43 19Mg Y=1.8890e-10 X=3.5892e-09
    44 20Mg Y=-2.8505e-32 X=-5.7010e-31
    45 21Mg Y=-4.8637e-25 X=-1.0214e-23
    46 22Mg Y=2.5868e-34 X=5.6910e-33
    47 23Mg Y=-3.3647e-22 X=-7.7387e-21
    48 24Mg Y=3.8259e-06 X=9.1821e-05
    49 25Mg Y=6.1414e-04 X=1.5353e-02
    50 26Mg Y=2.8708e-12 X=7.4641e-11
    51 27Mg Y=2.5484e-30 X=6.8806e-29
    52 23Al Y=-3.0272e-32 X=-6.9626e-31
    53 24Al Y=-6.0340e-21 X=-1.4482e-19
    54 25Al Y=6.9475e-23 X=1.7369e-21
    55 26Al Y=3.1543e-04 X=8.2012e-03
    56 27Al Y=1.0621e-03 X=2.8676e-02
    57 28Al Y=4.6133e-27 X=1.2917e-25
    58 24Si Y=-2.2160e-32 X=-5.3183e-31
    59 25Si Y=-1.7124e-31 X=-4.2811e-30
    60 26Si Y=3.0580e-31 X=7.9509e-30
    61 27Si Y=1.1035e-17 X=2.9796e-16
    62 28Si Y=3.1955e-03 X=8.9474e-02
    63 29Si Y=7.5633e-05 X=2.1934e-03
    64 30Si Y=9.1045e-04 X=2.7314e-02
    65 31Si Y=4.8914e-25 X=1.5163e-23
    66 27P Y=1.0303e-31 X=2.7817e-30
    67 28P Y=4.4809e-20 X=1.2546e-18
    68 29P Y=3.8147e-23 X=1.1063e-21
    69 30P Y=2.2895e-22 X=6.8686e-21
    70 31P Y=1.2625e-03 X=3.9138e-02
    71 32P Y=9.1834e-16 X=2.9387e-14
    72 33P Y=9.0280e-18 X=2.9793e-16
    73 28S Y=3.7601e-32 X=1.0528e-30
    74 29S Y=5.3545e-29 X=1.5528e-27
    75 30S Y=1.4187e-34 X=4.2562e-33
    76 31S Y=-1.0138e-13 X=-3.1427e-12
    77 32S Y=1.8800e-03 X=6.0162e-02
    78 33S Y=4.3558e-05 X=1.4374e-03
    79 34S Y=2.1131e-05 X=7.1846e-04
    80 35S Y=8.5269e-17 X=2.9844e-15
    81 30Cl Y=-9.4135e-24 X=-2.8241e-22
    82 31Cl Y=-6.0886e-19 X=-1.8875e-17
    83 32Cl Y=2.4898e-20 X=7.9673e-19
    84 33Cl Y=5.6847e-21 X=1.8760e-19
    85 34Cl Y=5.6735e-28 X=1.9290e-26
    86 35Cl Y=2.0414e-05 X=7.1448e-04
    87 36Cl Y=1.7409e-16 X=6.2673e-15
    88 37Cl Y=8.4958e-07 X=3.1435e-05
    89 38Cl Y=3.3445e-29 X=1.2709e-27
    90 31Ar Y=7.4030e-38 X=2.2949e-36
    91 32Ar Y=9.9329e-26 X=3.1785e-24
    92 33Ar Y=6.8698e-32 X=2.2670e-30
    93 34Ar Y=8.5691e-32 X=2.9135e-30
    94 35Ar Y=8.2973e-18 X=2.9041e-16
    95 36Ar Y=2.5565e-06 X=9.2034e-05
    96 37Ar Y=3.0886e-06 X=1.1428e-04
    97 38Ar Y=5.0106e-07 X=1.9040e-05
    98 39Ar Y=3.8803e-19 X=1.5133e-17
    99 34K Y=5.3158e-09 X=1.8074e-07
    100 35K Y=8.4942e-23 X=2.9730e-21
    101 36K Y=-8.7904e-21 X=-3.1646e-19
    102 37K Y=2.8211e-20 X=1.0438e-18
    103 38K Y=2.5681e-16 X=9.7589e-15
    104 39K Y=1.5397e-07 X=6.0049e-06
    105 40K Y=3.7574e-18 X=1.5029e-16
    106 41K Y=3.8371e-17 X=1.5732e-15
    107 35Ca Y=1.3585e-35 X=4.7546e-34
    108 36Ca Y=-3.0398e-32 X=-1.0943e-30
    109 37Ca Y=2.4737e-31 X=9.1526e-30
    110 38Ca Y=3.4796e-21 X=1.3222e-19
    111 39Ca Y=3.0192e-19 X=1.1775e-17
    112 40Ca Y=4.5446e-07 X=1.8179e-05
    113 41Ca Y=1.7009e-10 X=6.9738e-09
    114 42Ca Y=8.7137e-12 X=3.6597e-10
    115 43Ca Y=3.4254e-13 X=1.4729e-11
    116 44Ca Y=2.3877e-18 X=1.0506e-16
    117 39Sc Y=1.3810e-31 X=5.3858e-30
    118 40Sc Y=1.1081e-31 X=4.4325e-30
    119 41Sc Y=1.7272e-29 X=7.0814e-28
    120 42Sc Y=7.7547e-31 X=3.2570e-29
    121 43Sc Y=1.1874e-15 X=5.1058e-14
    122 44Sc Y=1.9983e-20 X=8.7924e-19
    123 45Sc Y=5.7668e-19 X=2.5951e-17
    124 41Ti Y=-7.8649e-26 X=-3.2246e-24
    125 42Ti Y=-6.3222e-27 X=-2.6553e-25
    126 43Ti Y=4.8206e-20 X=2.0728e-18
    127 44Ti Y=2.0909e-15 X=9.2002e-14
    128 45Ti Y=-2.5402e-24 X=-1.1431e-22
    129 46Ti Y=2.4539e-21 X=1.1288e-19
    130 43V Y=8.9751e-26 X=3.8593e-24
    131 44V Y=-2.5834e-32 X=-1.1367e-30
    132 45V Y=-7.7170e-34 X=-3.4726e-32
    133 46V Y=8.0543e-32 X=3.7050e-30
