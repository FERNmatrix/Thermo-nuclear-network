guidry_debugRG hash: c6013ea
-------------------------------

#define ISOTOPES 134                   // Max isotopes in network (e.g. 16 for alpha network)
#define SIZE 1566                       // Max number of reactions (e.g. 48 for alpha network)

#define plotSteps 100                 // Number of plot output steps
#define LABELSIZE 35                  // Max size of reaction string a+b>c in characters
#define PF 24                         // Number entries partition function table for isotopes
#define THIRD 0.333333333333333
#define TWOTHIRD 0.66666666666667
#define ECON 9.5768e17                // Convert MeV/nucleon/s to erg/g/s
#define LOG10 0.434294481903251       // Conversion natural log to log10
#define MEV 931.494                   // Conversion of amu to MeV
#define GZ 1.0e-24                    // Constant to ensure 1/max(num, GZ) never divides by 0

#define unitd static_cast<double>(1.0)  // Constant double equal to 1
#define zerod static_cast<double>(0.0)  // Constant double equal to 0

// File pointers for diagnostics output. Corresponding filenames declared 
// at top of main.

FILE* pFileD;
FILE* pfnet;

// Filename for network + partition function input.  The file output/CUDAnet.inp
// output by the Java code through the stream toCUDAnet has the expected format 
// for this file. Standard filenames for test cases are listed in table above.

char networkFile[] = "data/network_nova134.inp";

// Filename for input rates library data. The file rateLibrary.data output by 
// the Java code through the stream toRateData has the expected format for this 
// file.  Standard filenames for test cases are listed in table above.

char rateLibraryFile[] = "data/rateLibrary_nova134.data";

// Whether to use constant T and rho (hydroProfile false), in which case a
// constant T9 = T9_start and rho = rho_start are used, or to read
// in a hydrodynamical profile of T and rho versus time (hydroProfile true),
// in which case the file to be read in is specified by the character variable 
// hydroFile[].

bool hydroProfile = true; 

// Filename for input file containing a hydro profile in temperature
// and density that is used if hydroProfile = true. Sample hydro profile 
// files included in the data subdirectory are
//
//    data/torch47Profile.data         // Very hot Type Ia supernova zone
//    data/nova125DProfile.inp         // Representative zone in nova explosion
//    data/tidalSNProfile_100.inp      // Zone in tidal supernova explosion
//
// Use SplineInterpolator to interpolate in table read in. If hydroProfile and 
// plotHydroProfile are true, the hydro profile used for the temperature and 
// density in the calculation is also output to the file gnu_out/hydroProfileInput.data
// in format suitable for gnuplot.

char hydroFile[] = "data/nova125DProfile_400.inp";

// Control output of hydro profile (if one is used) to plot file.

static const bool plotHydroProfile = true;

const static int maxHydroEntries = 403; // Max entries hydro profile

// Control printout of flux data (true to print, false to suppress).
// Lots of data, so most useful for small networks.

static const bool plotFluxes = false;

// Plot output controls and file pointers

static const int maxPlotIsotopes = min(ISOTOPES, 365);   // # species to plot
int plotXlist[maxPlotIsotopes];           // Array of species plot indices

// Pointers to data output files

FILE* plotfile1;
FILE* plotfile2;
FILE* plotfile3;
FILE* plotfile4;

// Control flags for diagnostic output to files. Note that setting showDetails
// or showDetails2 true may generate large output files (MB to GB for large networks).

bool showAddRemove = false;  // Show addition/removal of RG from equilibrium
bool showDetails = false;    // Controls diagnostics to pFileD -> gnu_out/diagnostics.data
bool showDetails2 = false;   // Controls diagnostics to pfnet -> gnu_out/network.data

// Control which explicit algebraic approximations are used. Eventually
// this should be set from a data file. To use asymptotic set doASY true
// (which toggles doQSS to false). To use quasi-steady-state (QSS),set 
// doASY false (which toggles doQSS to true). doPE can be true or false 
// with either Asymptotic or QSS. The boolean showPE allows display of the number
// of reaction groups (RG) that would be in equilibrium if PE approximation were
// being implemented. It is true only if Asy or QSS, but PE not being
// implemented.

bool doASY = true;           // Whether to use asymptotic approximation
bool doQSS = !doASY;         // Whether to use QSS approximation 
bool doPE = false;            // Implement partial equilibrium also
bool showPE = !doPE;         // Show RG that would be in equil if doPE=false

string intMethod = "";       // String holding integration method
string ts;                   // Utility string

// Temperature and density variables. Temperature and density can be
// either constant, or read from a hydro profile as a function of time.

double T9;                   // Current temperature in units of 10^9 K
double rho;                  // Current density in units of g/cm^3

// Energy variables (from Q values)

double ERelease;              // Total energy released
double dERelease;             // Energy released per unit time
double netdERelease;          // Energy released in timestep

// Partition function controls. If dopf = true, reaction rates are
// corrected by temperature-dependent partition functions.  However
// partition function factors differ from 1 only at high temperature
// so we only implement partition function corrections if T9 > pfCut9,
// where pfCut9 is a cutoff temperature in units of T9. Typically in
// realistic calculation we would choose dopf = true and pfCut9 = 1.0.

bool dopf = true;
double pfCut9 = 1.0;

// Temperatures in units of 10^9 K for partition function table (see pf[]
// in the class Species). 

double Tpf[PF] = {0.1, 0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 
    1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    
    // Array holding the value of the partition function for each isotope at
    // the current temperature if dopf = true and T9 > pfCut9.
    
    double currentPF[ISOTOPES];
    
    // Array to hold whether given species satisfies asymptotic condition
    // True (1) if asyptotic; else false (0).
    
    bool isAsy[ISOTOPES];         // True if isotope is asymptotic
    double asycheck;              // Species asymptotic if asycheck > 1.0
    double asyFrac = 0.0;         // Fraction isotopes that are asymptotic
    
    // Whether isotope part of any RG in partial equilibrium this timestep
    
    bool isotopeInEquil[ISOTOPES]; 
    
    // isotopeInEquil[] from last timestep
    
    bool isotopeInEquilLast[ISOTOPES]; 
    
    // Set the temperature in units of 10^9 K and density in units of g/cm^3. In a
    // realistic calculation the temperature and density will be passed from the hydro 
    // code in an operator-split coupling of this network to hydro. Here we hardwire
    // constant values for testing purposes, or read in a temperature and density
    // hydro profile if hydroProfile is true.
    
    double T9_start = 7;           // Initial temperature in units of 10^9 K
    double rho_start = 1e8;        // Initial density in g/cm^3
    
    // Integration time data. The variables start_time and stop_time 
    // define the range of integration (all time units in seconds),
    // and dt_start sets the initial integration timestep. In an operator-split 
    // coupling  start_time will be 0, stop_time will correspond to the length
    // of the hydro timestep and dt_init will likely be something like the 
    // last timestep of the previous network integration (for the preceding 
    // hydro timestep). Here we hardwire them for testing purposes.
    // The variable startplot_time allows the plotting interval output
    // in gnu_out/gnufile.data to be a subset of the full integration interval. 
    // Generally, startplot_time > start_time.  By default the stop time for
    // plotting is the same as the stop time for integration, stop_time.
    
    double start_time = 1e-20;             // Start time for integration
    double logStart = log10(start_time);   // Base 10 log start time
    double startplot_time = 5e-6;          // Start time for plot output
    double stop_time = 1e6;                // Stop time for integration
    double logStop = log10(stop_time);     // Base-10 log stop time5
    double dt_start = 0.01*start_time;     // Initial value of integration dt
    double dt_saved;                       // Full timestep used for this int step
    double t_saved;                        // Start time this timestep (end t for last step)
    double dt_half;                        // Half of full timestep
    double dt_change;                      // Change in proposed dt from last timestep
    double t_end;                          // End time for this timestep
    double dt_new;                         // Variable used in computeNextTimeStep()
    double dtmin;                          // Variable used in computeNextTimeStep()
    double dt_desired;                     // dt desired if not prevented by plot timestep
    double dt_ceiling = 0.1;               // Max timestep is dt_ceiling*t, for accuracy
    
    double dt_FE = dt_start;               // Max stable forward Euler timestep
    double dt_EA = dt_start;               // Max asymptotic timestep
    
    int dtMode;                            // Dual dt stage (0=full, 1=1st half, 2=2nd half)
    
    double massTol_asy = 2e-4;             // Tolerance param if no reactions equilibrated
    double massTol_asyPE = 9e-4;           // Tolerance param if some reactions equilibrated
    double massTol = massTol_asy;          // Timestep tolerance parameter for integration
    double downbumper = 0.7;               // Asy dt decrease factor
    double sf = 1e25;                      // dt_FE = sf/fastest rate
    int maxit = 100;                        // Max asy dt iterations allowed for a step
    int iterations;                        // # iterations in step to conserve particles 
    int totalIterations;                   // Total number of iterations, all steps til now
    int mostIterationsPerStep = 0;         // Most iterations in a timestep
    int maxIterationStep;                  // Step where mostIterationsPerStep occurred
    double maxIterationTime;               // Time where mostIterationsPerStep occurred
    double Error_Observed;                 // Observed integration error
    double Error_Desired;                  // Desired max local integration error
    double E_R;                            // Ratio actual to desired error
    double EpsA = 2e-4;                    // Absolute error tolerance
    double EpsR = 2.0e-4;                  // Relative error tolerance (not presently used)
    
    // equilTime is time to begin imposing partial equilibrium if doPE=true. Hardwired but 
    // eventually should be determined by the program.  In the Java version this was sometimes
    // needed because starting PE test too early could lead to bad results.  This is 
    // probably an error in the Java version, since if operating properly nothing should
    // be changed at a timestep if nothing satisfies PE condition.  Thus, we should not need
    // this in a final version for stability, but it might still be useful since early in
    // a calculation typically nothing satisfies PE, so checking for it is a waste of time.
    // On the other hand, the check costs little computing time so to make the code more
    // universal it may be best to check for equilibration from the beginning of the 
    // calculation. 
    
    double equilTime = start_time;    // Time to begin checking for PE
    
    double equiTol = 0.01;           // Tolerance for checking whether Ys in RG in equil
    double deviousMax = 0.2;          // Max allowed deviation from equil k ratio in timestep
    
    --------------------------------------------------
    
    95 it=0 t=2.86e+05 dt=2.86e+04 dt'=2.60e+04 int=881 asy=0.28 eq=31.08 sX=0.986 Xfac=1.000 dE=1.09e+09 E=9.70e+17 E_R=8.21e-03 c1=1 c2=1 fast=184 Q=17.34 dev=0.00e+00 lT=7.662 lrho=1.14
    96 it=0 t=3.81e+05 dt=3.81e+04 dt'=3.47e+04 int=884 asy=0.27 eq=31.16 sX=0.986 Xfac=1.000 dE=7.58e+08 E=9.70e+17 E_R=7.72e-03 c1=1 c2=1 fast=184 Q=17.34 dev=0.00e+00 lT=7.650 lrho=1.13
    97 it=0 t=4.61e+05 dt=4.61e+04 dt'=4.19e+04 int=886 asy=0.28 eq=31.23 sX=0.986 Xfac=1.000 dE=5.93e+08 E=9.70e+17 E_R=7.38e-03 c1=1 c2=1 fast=184 Q=17.34 dev=0.00e+00 lT=7.642 lrho=1.12
    98 it=0 t=6.14e+05 dt=6.14e+04 dt'=5.58e+04 int=889 asy=0.32 eq=31.33 sX=0.986 Xfac=1.000 dE=4.09e+08 E=9.70e+17 E_R=6.89e-03 c1=1 c2=1 fast=184 Q=17.34 dev=0.00e+00 lT=7.630 lrho=1.11
    99 it=0 t=8.17e+05 dt=8.17e+04 dt'=7.43e+04 int=892 asy=0.28 eq=31.43 sX=0.986 Xfac=1.000 dE=2.81e+08 E=9.70e+17 E_R=6.24e-03 c1=1 c2=1 fast=184 Q=17.34 dev=0.00e+00 lT=7.617 lrho=1.09
    100 it=0 t=1.09e+06 dt=1.09e+05 dt'=9.89e+04 int=895 asy=0.28 eq=31.52 sX=0.986 Xfac=1.000 dE=1.93e+08 E=9.70e+17 E_R=5.93e-03 c1=1 c2=1 fast=184 Q=17.34 dev=0.00e+00 lT=7.605 lrho=1.08
    
    Integration using ASY method (Partition function corrections applied for T9=1.00 and above)
    massTol_asy=2.00e-04 massTol_PE=9.00e-04
    sf=1.00e+25 equiTol=1.00e-02 equilTime=1.00e-20
    maxit=100 downbumper= 0.700 EpsA=2.00e-04 EpsR=2.00e-04 deviousMax=0.200
    Network: data/network_nova134.inp  Rates: data/rateLibrary_nova134.data
    Hydro profile: data/nova125DProfile_400.inp
    Isotopes=134 Reactions=1566 ReactionGroups=693 SingletRG=99
    Integration steps=895 totalIterations=496 IntegrationSteps_plotted=533
    Max dt iterations = 31 at step 602 (t=5.299e+01)
    Timer: 6.6493e-01 sec used
    
    FINAL ABUNDANCES Y AND MASS FRACTIONS X
    
    0 1n Y=2.7404e-33 X=2.7404e-33
    1 1H Y=2.2570e-01 X=2.2570e-01
    2 2H Y=4.2680e-19 X=8.5360e-19
    3 3He Y=1.1179e-12 X=3.3537e-12
    4 4He Y=5.8467e-02 X=2.3387e-01
    5 7Li Y=-2.5559e-10 X=-1.7891e-09
    6 7Be Y=-9.4997e-08 X=-6.6498e-07
    7 8B Y=-7.9409e-14 X=-6.3527e-13
    8 11B Y=-1.2931e-24 X=-1.4224e-23
    9 9C Y=-7.6052e-22 X=-6.8447e-21
    10 11C Y=-3.7514e-25 X=-4.1266e-24
    11 12C Y=5.3562e-03 X=6.4274e-02
    12 13C Y=2.0590e-03 X=2.6767e-02
    13 14C Y=1.1794e-16 X=1.6512e-15
    14 12N Y=-6.7351e-28 X=-8.0821e-27
    15 13N Y=1.1842e-08 X=1.5394e-07
    16 14N Y=1.6571e-03 X=2.3200e-02
    17 15N Y=5.7080e-08 X=8.5620e-07
    18 16N Y=6.2318e-31 X=9.9708e-30
    19 14O Y=6.1121e-17 X=8.5569e-16
    20 15O Y=1.5473e-11 X=2.3210e-10
    21 16O Y=9.9037e-06 X=1.5846e-04
    22 17O Y=1.7648e-06 X=3.0002e-05
    23 18O Y=7.7036e-08 X=1.3866e-06
    24 16Fl Y=3.1322e-23 X=5.0116e-22
    25 17Fl Y=1.9790e-15 X=3.3643e-14
    26 18Fl Y=4.3717e-14 X=7.8690e-13
    27 19Fl Y=3.2853e-08 X=6.2420e-07
    28 20Fl Y=-3.6962e-27 X=-7.3924e-26
    29 16Ne Y=3.5970e-21 X=5.7552e-20
    30 18Ne Y=5.7933e-29 X=1.0428e-27
    31 19Ne Y=2.6504e-26 X=5.0357e-25
    32 20Ne Y=6.7786e-03 X=1.3557e-01
    33 21Ne Y=4.4251e-07 X=9.2927e-06
    34 22Ne Y=3.5662e-07 X=7.8455e-06
    35 23Ne Y=9.0345e-30 X=2.0779e-28
    36 18Na Y=2.1153e-21 X=3.8076e-20
    37 19Na Y=4.1943e-31 X=7.9691e-30
    38 20Na Y=1.2629e-20 X=2.5257e-19
    39 21Na Y=1.3365e-15 X=2.8065e-14
    40 22Na Y=3.8631e-05 X=8.4988e-04
    41 23Na Y=8.6098e-05 X=1.9802e-03
    42 24Na Y=1.4577e-24 X=3.4986e-23
    43 19Mg Y=1.8912e-10 X=3.5933e-09
    44 20Mg Y=3.0767e-32 X=6.1533e-31
    45 21Mg Y=-2.2161e-30 X=-4.6538e-29
    46 22Mg Y=1.0406e-29 X=2.2892e-28
    47 23Mg Y=4.4045e-22 X=1.0130e-20
    48 24Mg Y=3.8285e-06 X=9.1884e-05
    49 25Mg Y=6.1371e-04 X=1.5343e-02
    50 26Mg Y=2.9126e-12 X=7.5728e-11
    51 27Mg Y=1.4382e-28 X=3.8832e-27
    52 23Al Y=3.0904e-32 X=7.1080e-31
    53 24Al Y=1.2497e-20 X=2.9993e-19
    54 25Al Y=6.5471e-23 X=1.6368e-21
    55 26Al Y=3.1522e-04 X=8.1958e-03
    56 27Al Y=1.0617e-03 X=2.8666e-02
    57 28Al Y=3.8682e-27 X=1.0831e-25
    58 24Si Y=3.5816e-32 X=8.5958e-31
    59 25Si Y=-1.3057e-31 X=-3.2642e-30
    60 26Si Y=2.2851e-29 X=5.9413e-28
    61 27Si Y=1.0351e-17 X=2.7947e-16
    62 28Si Y=3.1962e-03 X=8.9494e-02
    63 29Si Y=7.5668e-05 X=2.1944e-03
    64 30Si Y=9.1139e-04 X=2.7342e-02
    65 31Si Y=4.5615e-25 X=1.4141e-23
    66 27P Y=1.4954e-31 X=4.0375e-30
    67 28P Y=2.5265e-20 X=7.0742e-19
    68 29P Y=4.8039e-24 X=1.3931e-22
    69 30P Y=2.1414e-22 X=6.4242e-21
    70 31P Y=1.2635e-03 X=3.9169e-02
    71 32P Y=1.0176e-15 X=3.2563e-14
    72 33P Y=1.0103e-17 X=3.3338e-16
    73 28S Y=2.1789e-32 X=6.1010e-31
    74 29S Y=3.0022e-32 X=8.7064e-31
    75 30S Y=-1.3131e-31 X=-3.9393e-30
    76 31S Y=-3.1780e-13 X=-9.8518e-12
    77 32S Y=1.8821e-03 X=6.0227e-02
    78 33S Y=4.3680e-05 X=1.4414e-03
    79 34S Y=2.1215e-05 X=7.2130e-04
    80 35S Y=9.6461e-17 X=3.3761e-15
    81 30Cl Y=-6.3371e-30 X=-1.9011e-28
    82 31Cl Y=-1.8549e-18 X=-5.7502e-17
    83 32Cl Y=-5.5664e-21 X=-1.7813e-19
    84 33Cl Y=5.3690e-21 X=1.7718e-19
    85 34Cl Y=1.7906e-26 X=6.0879e-25
    86 35Cl Y=2.0550e-05 X=7.1926e-04
    87 36Cl Y=1.9910e-16 X=7.1676e-15
    88 37Cl Y=8.8035e-07 X=3.2573e-05
    89 38Cl Y=3.4980e-29 X=1.3292e-27
    90 31Ar Y=-1.3661e-31 X=-4.2350e-30
    91 32Ar Y=-1.2182e-26 X=-3.8982e-25
    92 33Ar Y=6.5999e-32 X=2.1780e-30
    93 34Ar Y=2.2768e-31 X=7.7412e-30
    94 35Ar Y=2.4408e-15 X=8.5428e-14
    95 36Ar Y=2.5771e-06 X=9.2777e-05
    96 37Ar Y=3.0987e-06 X=1.1465e-04
    97 38Ar Y=5.0393e-07 X=1.9149e-05
    98 39Ar Y=4.5919e-19 X=1.7908e-17
    99 34K Y=5.3856e-09 X=1.8311e-07
    100 35K Y=1.3568e-20 X=4.7488e-19
    101 36K Y=-1.7170e-19 X=-6.1811e-18
    102 37K Y=-4.8550e-21 X=-1.7964e-19
    103 38K Y=1.6837e-19 X=6.3979e-18
    104 39K Y=1.5410e-07 X=6.0100e-06
    105 40K Y=4.5536e-18 X=1.8214e-16
    106 41K Y=3.9552e-17 X=1.6216e-15
    107 35Ca Y=1.1944e-35 X=4.1805e-34
    108 36Ca Y=-5.6073e-31 X=-2.0186e-29
    109 37Ca Y=-4.8826e-32 X=-1.8066e-30
    110 38Ca Y=-6.7360e-21 X=-2.5597e-19
    111 39Ca Y=6.8079e-19 X=2.6551e-17
    112 40Ca Y=4.5450e-07 X=1.8180e-05
    113 41Ca Y=1.7039e-10 X=6.9859e-09
    114 42Ca Y=8.7398e-12 X=3.6707e-10
    115 43Ca Y=2.1852e-13 X=9.3963e-12
    116 44Ca Y=2.4336e-18 X=1.0708e-16
    117 39Sc Y=3.0070e-31 X=1.1727e-29
    118 40Sc Y=-1.2744e-31 X=-5.0978e-30
    119 41Sc Y=-3.5225e-20 X=-1.4442e-18
    120 42Sc Y=3.4115e-20 X=1.4328e-18
    121 43Sc Y=-6.4112e-15 X=-2.7568e-13
    122 44Sc Y=2.0121e-20 X=8.8531e-19
    123 45Sc Y=6.1948e-19 X=2.7877e-17
    124 41Ti Y=-8.2229e-26 X=-3.3714e-24
    125 42Ti Y=3.6842e-31 X=1.5474e-29
    126 43Ti Y=1.2365e-18 X=5.3172e-17
    127 44Ti Y=2.1054e-15 X=9.2639e-14
    128 45Ti Y=-2.6863e-21 X=-1.2088e-19
    129 46Ti Y=1.4366e-21 X=6.6084e-20
    130 43V Y=4.0891e-31 X=1.7583e-29
    131 44V Y=1.4182e-32 X=6.2399e-31
    132 45V Y=-7.4907e-31 X=-3.3708e-29
    133 46V Y=3.6868e-32 X=1.6959e-30
    
