
EXAMPLE 1:
The array reaction[] is created and referenced as follows:

    // Declare pointer used to access the fields and functions of 
    // class Reaction

    Reaction *ReactionPtr;

    // Create an array of Reaction objects reaction[] to hold information and 
    // functions for the reactions in the network. Each element of the array 
    // will be a Reaction object corresponding to a different reaction of the 
    // network.

    Reaction reaction [SIZE];

Then the array reaction[] is accessed with pointer commands like

    // Store in the Reaction class instance reaction[n]. First set a
    // pointer to array of Reaction objects reaction[]

    ReactionPtr = &reaction[n];

    // The setter functions are defined in the class Reaction

    ReactionPtr->setreacIndex(n);
    ReactionPtr->setreacString(rlabel);   // also fills reacLabel[][]
    ReactionPtr->setreacGroupClass(i0);   // also fills RGclass[]
    ReactionPtr->setRGmemberIndex(i1);    // also fills RGMemberIndex[]
    ReactionPtr->setreacClass(i2);
    ReactionPtr->setnumberReactants(i3);  // also fills NumReactingSpecies[]
    ReactionPtr->setnumberProducts(i4);   // also fills NumProducts[]
    ReactionPtr->setisEC(i5);
    ReactionPtr->setisReverse(i6);
    ReactionPtr->setQ(q);
    ReactionPtr->setprefac(sf);
    ReactionPtr->setispeforward(i7);
    
and also array index commands like

    reaction[i].getreacIndex() 
    reaction[i].getreacChar()  
    reaction[i].getreacClass()
    
with no free() command at the end because the memory for reaction[SIZE] 
wasn't allocated by malloc.


EXAMPLE 2:
On the other hand, an array like RG[] is created as:

    // Create pointer to an array of ReactionGroup objects RG[] to hold 
    // information andfunctions for reactions groups in the network. Each 
    // element of the array will be a ReactionGroup object corresponding to a 
    // different reaction group of the network.
    // Memory for array will be allocated dynamically below to the size
    // given by numberRG (which is computed in the class ReactionVector)

    ReactionGroup *RG;   // Pointer to 1D array for reaction groups
    
    // Allocate dynamically memory for an array of ReactionGroup objects of 
    // dimension numberRG, where numberRG was determined by
    // ReactionVector::sortReactionGroups() above.
    
    RG = (ReactionGroup*) malloc(sizeof(ReactionGroup)*numberRG);
    
and accessed using array index notation (seems I didn't use the pointer for
accessing this array in the code):

    RG[i].computeEquilibrium();
    
Then since the memory for RG was allocated with malloc it is de-allocated at 
the end using free():
   
    free(RG);
    
